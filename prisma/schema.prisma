generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  password           String?
  name               String?
  image              String?
  role               UserRole           @default(MEMBER)
  hierarchyLevel     HierarchyLevel?    @default(RF1)
  isActive           Boolean            @default(true)
  emailVerified      DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  contactNumber      String?
  customDepartment   String?
  customDivision     String?
  customSection      String?
  customTeam         String?
  department         String?
  division           String?
  firstName          String?
  isLeader           Boolean            @default(false)
  jobLevel           String?
  lastName           String?
  middleName         String?
  organizationalPath String?
  positionTitle      String?
  reportsToId        String?
  section            String?
  sectorHeadInitials String?
  shortName          String?
  team               String?
  username           String?            @unique
  accounts           Account[]
  activities         Activity[]
  comments           Comment[]
  commentReactions   CommentReaction[]
  events             Event[]
  sessions           Session[]
  taskCollaborators  TaskCollaborator[] @relation("TaskCollaborators")
  taskTeamMembers    TaskTeamMember[]   @relation("TaskTeamMembers")
  assignedTasks2     Task[]             @relation("TaskAssignedBy")
  assignedTasks      Task[]             @relation("TaskAssignee")
  createdTasks       Task[]             @relation("TaskCreator")
  teamMembers        TeamMember[]
  reportsTo          User?              @relation("UserReportsTo", fields: [reportsToId], references: [id])
  subordinates       User[]             @relation("UserReportsTo")

  @@map("users")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  events      Event[]
  tasks       Task[]
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String         @id @default(cuid())
  userId   String
  teamId   String
  role     TeamMemberRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Task {
  id                 String             @id @default(cuid())
  title              String
  description        String?
  status             TaskStatus         @default(TODO)
  priority           Priority           @default(MEDIUM)
  dueDate            DateTime?
  startDate          DateTime?
  assigneeId         String?
  creatorId          String
  teamId             String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  assignedById       String?
  progressPercentage Int                @default(0)
  taskType           TaskType           @default(INDIVIDUAL)
  comments           Comment[]
  events             Event[]
  collaborators      TaskCollaborator[]
  teamMembers        TaskTeamMember[]
  assignedBy         User?              @relation("TaskAssignedBy", fields: [assignedById], references: [id])
  assignee           User?              @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator            User               @relation("TaskCreator", fields: [creatorId], references: [id])
  team               Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskTeamMember {
  id        String         @id @default(cuid())
  taskId    String
  userId    String
  role      TaskMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User           @relation("TaskTeamMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_team_members")
}

model TaskCollaborator {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskCollaborators", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_collaborators")
}

model Comment {
  id        String            @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  parentId  String?
  imageUrl  String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task      Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parent    Comment?          @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]         @relation("CommentReplies")
  reactions CommentReaction[]

  @@map("comments")
}

model CommentReaction {
  id        String   @id @default(cuid())
  emoji     String
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@map("comment_reactions")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  allDay      Boolean   @default(false)
  color       String?
  type        EventType @default(MEETING)
  creatorId   String
  teamId      String?
  taskId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  task        Task?     @relation(fields: [taskId], references: [id])
  team        Team?     @relation(fields: [teamId], references: [id])

  @@map("events")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  userId      String
  entityId    String?
  entityType  String?
  metadata    Json?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model OrganizationalUnit {
  id                String                 @id @default(cuid())
  name              String
  code              String?
  unitType          OrganizationalUnitType
  level             Int
  parentId          String?
  path              String
  metadata          Json?
  isActive          Boolean                @default(true)
  allowsCustomInput Boolean                @default(false)
  requiresCode      Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  parent            OrganizationalUnit?    @relation("UnitHierarchy", fields: [parentId], references: [id])
  children          OrganizationalUnit[]   @relation("UnitHierarchy")

  @@unique([name, parentId])
  @@map("organizational_units")
}

model OrganizationTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  structure   Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("organization_templates")
}

model Division {
  id          String       @id @default(cuid())
  name        String       @unique
  code        String?      @unique
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]

  @@map("divisions")
}

model Department {
  id         String    @id @default(cuid())
  name       String
  code       String?
  divisionId String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  division   Division  @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  sections   Section[]

  @@unique([name, divisionId])
  @@map("departments")
}

model Section {
  id           String      @id @default(cuid())
  name         String
  code         String?
  departmentId String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  department   Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  teamLabels   TeamLabel[]

  @@unique([name, departmentId])
  @@map("sections")
}

model TeamLabel {
  id        String   @id @default(cuid())
  name      String
  code      String?
  sectionId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([name, sectionId])
  @@map("team_labels")
}

model SectorHead {
  id          String   @id @default(cuid())
  initials    String   @unique
  fullName    String
  description String?
  divisionId  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sector_heads")
}

model JobLevel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_levels")
}

model AdminSettings {
  id                       String         @id @default(cuid())
  systemName               String         @default("GCGC Team Management System")
  systemDescription        String?
  allowUserRegistration    Boolean        @default(true)
  requireEmailVerification Boolean        @default(false)
  defaultUserRole          UserRole       @default(MEMBER)
  defaultHierarchyLevel    HierarchyLevel @default(RF1)
  sessionTimeout           Int            @default(60)
  maxLoginAttempts         Int            @default(3)
  enableNotifications      Boolean        @default(true)
  enableAuditLogging       Boolean        @default(true)
  maintenanceMode          Boolean        @default(false)
  maintenanceMessage       String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  @@map("admin_settings")
}

enum UserRole {
  ADMIN
  LEADER
  MEMBER
}

enum HierarchyLevel {
  RF1
  RF2
  RF3
  OF1
  OF2
  M1
  M2
}

enum TeamMemberRole {
  LEADER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  INDIVIDUAL
  TEAM
  COLLABORATION
}

enum TaskMemberRole {
  LEADER
  MEMBER
}

enum EventType {
  MEETING
  DEADLINE
  REMINDER
  MILESTONE
  PERSONAL
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  COMMENT_ADDED
  TEAM_JOINED
  TEAM_LEFT
  EVENT_CREATED
  EVENT_UPDATED
  LOGIN
}

enum OrganizationalUnitType {
  DIVISION
  DEPARTMENT
  SECTION
  TEAM
  CUSTOM
}
